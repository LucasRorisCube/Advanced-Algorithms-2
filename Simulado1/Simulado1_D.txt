#include <iostream>

int numImp(int P, int V , int T);

int main() {
  
  int nProb = 0;
  
  int P = 0;
  int V = 0;
  int T = 0;

  int acc = 0;
  
  std::cin >> nProb;

  for(int i = 0; i < nProb ; i++){

    std::cin >> P >> V >> T;

    acc += numImp(P,V,T);
      #include <iostream>
#include <vector>

using namespace std;

long long solve(int i, int j, int n, vector<vector<int>>& memo, vector<int> nums){
  if(i == n-1) return memo[i][j] = memo[i-1][j]+nums[i];
  if(j == n-1) return memo[i][j] = memo[i][j-1]+nums[j];

  if(memo[i][j] != -1) return memo[i][j];

  memo[i][j] = 
}

int main() {

  long long t;
  cin >> t;

  for(int k = 0 ; k < t ; k++){

    long long n;
    cin >> n;

    string str;
    cin >> str;

    solve();
  }

  vector<long long> heights(n);
  for(long long i = 0 ; i < n ; ++i) cin >> heights[i];


}
  }

  std::cout <<  acc;
}


int numImp(int P, int V , int T){

  if((P + V + T) >= 2){
    return 1;
  }else{
   return 0; 
  }
  
}