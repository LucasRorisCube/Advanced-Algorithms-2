#include <iostream>
#include <string>
#include <map>
#include <vector>

using namespace std;

map<char, double> SBC;
vector<int> letter(26,0);
void setup(){

  SBC['a'] = 12.53;
  SBC['b'] = 1.42;
  SBC['c'] = 4.68;
  SBC['d'] = 5.86;
  SBC['e'] = 13.68;
  SBC['f'] = 0.69;
  SBC['g'] = 1.01;
  SBC['h'] = 0.70;
  SBC['i'] = 6.25;
  SBC['j'] = 0.44;
  SBC['k'] = 0.00;
  SBC['l'] = 4.97;
  SBC['m'] = 3.15;
  SBC['n'] = 6.71;
  SBC['o'] = 8.68;
  SBC['p'] = 2.51;
  SBC['q'] = 0.88;
  SBC['r'] = 6.87;
  SBC['s'] = 7.98;
  SBC['t'] = 4.63;
  SBC['u'] = 3.93;
  SBC['v'] = 0.90;
  SBC['w'] = 0.02;
  SBC['x'] = 0.22;
  SBC['y'] = 0.90;
  SBC['z'] = 0.52;

  
}

double calcSBC(string word){

  double sum = 0.0;
  for(int i = 0 ; i < (int)word.size() ; i++){
    sum += (i+1)*SBC[word[i]];
  }
  return sum;
}

vector<double> allWordsSBC;

void recursion(string currentWord, string word, int index){

  if(currentWord.size() == word.size()){
    //cout << currentWord << endl;
    allWordsSBC.push_back(calcSBC(currentWord));
    return;
  }
  
  for(char c = 'a' ; c <= 'z' ; c++){
    string aux = currentWord;

    if(letter[c - 97] == 2){
      continue;
    }
    if(index%2 == 0){
      
      if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){
        aux += c;
        letter[c - 97] += 1;
        recursion(aux, word, index+1);
        letter[c - 97] -= 1;
      }
      
    } else {
      
      if(c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u'){
        aux += c;
        letter[c - 97] += 1;
  
        recursion(aux, word, index+1);
        letter[c - 97] -= 1;
      }
      
    }
  }
}

void generateWords(string word){


  char initialLetter = word[0];
  letter[initialLetter - 97] += 1;
  
  for(char c = 'a' ; c <= 'z' ; c++){
    string aux(1, initialLetter);

    if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){
      aux += c;
      letter[c - 97] += 1;
      recursion(aux, word, 3);
      letter[c - 97] -= 1;
    }
    
  }
  letter[initialLetter - 97] -= 1;
}

int main() {

  setup();
  int n;
  cin >> n;

  for(int t = 0 ; t < n ; t++){

    string word;
    cin >> word;

    // Gerar palavras

    allWordsSBC.clear();

    generateWords(word);

    double sum = 0.0;
    for(double SBC : allWordsSBC){
      sum += SBC;
    }
    sum = sum/((int)allWordsSBC.size());

    //cout << calcSBC(word) << endl;
    //cout << sum << endl;
    if(calcSBC(word) < sum){
      cout << "below" << endl;
    } else {
      cout << "above or equal" << endl;
    }
    
  }
}