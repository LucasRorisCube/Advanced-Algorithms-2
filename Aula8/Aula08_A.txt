#include <iostream>
#include <map>
#include <queue>
#include <vector>

using namespace std;

bool caminho(int s, int t, vector<vector<int>> &graph, map<int, int> &parent) {
  queue<int> q;

  q.push(s);
  parent[s] = -1;
  int V = (int)graph.size();
  vector<int> visitado(V, 0);
  visitado[s] = 1;

  while (!q.empty()) {
    int u = q.front();
    q.pop();

    // para todo v adj a u
    for (int v = 0; v < V; ++v) {

      if (graph[u][v] > 0 && visitado[v] == 0) {
        q.push(v);
        parent[v] = u;
        visitado[v] = 1;
      }
    }
  }
  // verifica se tem caminho de s para t
  return (visitado[t] == 1);
}

int solve(int s, int t, vector<vector<int>> graph) {

  int u, v;
  map<int, int> parent;
  int maxFlow = 0;

  while (caminho(s, t, graph, parent)) {
    long long gargalo = INT64_MAX;

    for (int v = t; v != s; v = parent[v]) {
      u = parent[v];
      gargalo = min(gargalo, (long long)graph[u][v]);
    }

    // Atualiza o forward e backward edges...
    for (int v = t; v != s; v = parent[v]) {
      u = parent[v];
      graph[u][v] -= gargalo;
      graph[v][u] += gargalo;
    }
    maxFlow += gargalo;
  }

  return maxFlow;
}

int main() {

  int n;

  cin >> n;
  int iteration = 1;
  while (n != 0) {

    vector<vector<int>> graph(n + 1, vector<int>(n + 1, 0));

    int s, t, m;
    cin >> s >> t >> m;

    for (int i = 0; i < m; i++) {
      int u, v, w;
      cin >> u >> v >> w;

      graph[u][v] += w;
      graph[v][u] += w;
    }

    int answer = solve(s, t, graph);
    //if (iteration == 1) {
    //  cout << "Network " << iteration << "\nThe bandwidth is " << answer << "." << endl;
    //} else {
      cout << "Network " << iteration << "\nThe bandwidth is " << answer << "." << endl << endl;
    //}

    iteration++;
    cin >> n;
  }
}
/*
4
1 4 5
1 2 20
1 3 10
2 3 5
2 4 10
3 4 20
*/